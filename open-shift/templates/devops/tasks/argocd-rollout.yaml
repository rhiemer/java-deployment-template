apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-rollout
spec:
  params:
    - name: ARGOCD_IMAGE
      type: string
      default: argoproj/argocd:v1.7.7
    - name: APP_NAME
      type: string
    - name: WAIT
      type: string
      default: "true"
    - name: REVISION
      description: the revision to sync to
      default: main     
    - name: ARGOCD_SECRET
      type: string
      default: argocd-login-secret     
    - name: ARGS
      type: array
      default: []       
    - name: ARGS_WAIT
      type: array
      default: []        
  stepTemplate:
    envFrom:
      - secretRef:
          name: $(params.ARGOCD_SECRET)
  steps:
    - name: sync
      image: $(params.ARGOCD_IMAGE)
      args:
        - $(params.ARGS[*])      
      script: |
        #!/usr/bin/env bash
        set -o errexit   

        APP_NAME=$(params.APP_NAME)
        REVISION=$(params.REVISION)
        WAIT=$(params.WAIT)
        
        if [ -z "$ARGOCD_AUTH_TOKEN" ]; then
          PARAMS_LOGIN=()
          if [ ! -z "${ARGOCD_SERVER// }" ] ; then
           PARAMS_LOGIN+=( "$ARGOCD_SERVER" )
          fi
          if [ ! -z "${ARGOCD_URL// }" ] ; then
           PARAMS_LOGIN+=( --grpc-web "$ARGOCD_URL" )
          fi
          if [ ! -z "${ARGOCD_USERNAME// }" ] ; then
           PARAMS_LOGIN+=( --username "$ARGOCD_USERNAME" )
          fi
          if [ ! -z "${ARGOCD_PASSWORD// }" ] ; then
           PARAMS_LOGIN+=( --password "$ARGOCD_PASSWORD" )
          fi
          echo "Logando no ArgoCd: ${ARGOCD_SERVER:-$ARGOCD_URL}"
          yes | argocd login --insecure ${PARAMS_LOGIN[@]}
        fi        
        
        echo "Sync da aplicação no ArgoCD $APP_NAME"
        argocd app sync $APP_NAME --revision "$REVISION" --insecure $@
        if [ "${WAIT// }" == "true" ] ; then
          echo "Aguardando sync da aplicação no ArgoCD $APP_NAME"
          argocd app wait $APP_NAME --sync --health --operation --insecure $@
        fi
