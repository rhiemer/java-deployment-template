apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: maven-build
spec:
  workspaces:
    - name: source
  params:
    - name: MAVEN_IMAGE
      type: string
      description: Maven base image
      default: gcr.io/cloud-builders/mvn@sha256:57523fc43394d6d9d2414ee8d1c85ed7a13460cbb268c3cd16d28cfb3859e641
    - name: MAVEN_COMMAND
      type: array
      description: Maven base image
      default:   
        - "package"
        - "-DskipTests"
    - name: SPRING_BOOT
      type: string
      description: Maven base image
      default: "false"
    - name: CONTEXT_DIR
      type: string
      description: >-
        The context directory within the repository for sources on
        which we want to execute maven goals.
      default: "."
    - name: FILE
      type: string
      description: File build.   
      default: ""   
  results:
    - description: Build apps spring boot
      name: file-deploy
  steps:
    - name: mvn-command
      image: $(params.MAVEN_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
      args:
        - $(params.MAVEN_COMMAND[*])
      script: |
        #!/usr/bin/env bash
        set -o errexit   

        FILE="$(params.FILE)"
        SPRING_BOOT="$(params.SPRING_BOOT)"

        PARAMS_COMMAND=()
        if [ "${SPRING_BOOT// }" == "true" ] ; then
          PARAMS_COMMAND+=( spring-boot:repackage )
        fi
        mvn -B $@ ${PARAMS_COMMAND[@]}
        if [ ! -z "${FILE// }" ]; then
           _FILE=`find target/ -name ${FILE} -size +1000c -printf '%p %s\n' | sort -k2 -n | awk '{ print $1 }' | tail -n 1 || echo '' `
        else
           #busca o arquivo com o maior tamanho e o tipo relacionado a java
           _FILE=${_FILE:-`find target -type f -name *.ear -size +1000c -printf '%p %s\n' | sort -k2 -n | awk '{ print $1 }' | tail -n 1 || echo '' `}
           _FILE=${_FILE:-`find target -type f -name *.war -size +1000c -printf '%p %s\n' | sort -k2 -n | awk '{ print $1 }' | tail -n 1 || echo '' `}
           _FILE=${_FILE:-`find target -type f -name *.jar -size +1000c -printf '%p %s\n' | sort -k2 -n | awk '{ print $1 }' | tail -n 1 || echo '' `}
        fi   
        if [ -z "${_FILE// }" ]; then
           echo "Nenhum arquivo encontrado para deploy." 1>&2
           exit 40
        fi
        echo "Arquivo para deploy `basename $_FILE`"
        echo -n `realpath $_FILE` | tee $(results.file-deploy.path)